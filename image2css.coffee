im		= require( 'imagemagick' )
sys		= require( 'sys' )
exec 	= require( 'child_process' ).exec

class ImageToCSS

	options:
		width: 200
		pixelSize: 1
		blur: 0

	colors: {}

	constructor: ( file, options ) ->
		@path			= file
		@pathResized	= @path.replace( /\.png/, "-resized.png" )

	convert: ( @callback )  =>
		@callback = callback
		@resize()


	resize: () ->
		image = im.resize( {
				srcPath:	@path, 
				dstPath:	@pathResized,
				width:		@options.width
			},  

			( err, stdout, stderr ) =>
				if err then throw err
				@readMeta()
		)

	readMeta: () =>
		im.identify @pathResized, ( err, features ) =>
			if err then throw err
			@width	= features.width
			@height	= features.height
			@getIndexColor 0, 0

	getIndexColor: (width, height) =>
		exec("convert #{@pathResized}[1x1+#{width}+#{height}] -format 'rgb(%[fx:floor(255*u.r)],%[fx:floor(255*u.g)],%[fx:floor(255*u.b)])' info:-", 
			( err, stdout, stderr ) =>
				console.log width, height, "rgb(#{stdout.replace( /[^0-9,]/g, "" )})"

				@colors[ height ] ?= {}
				@colors[ height ][ width ] = "rgb(#{stdout.replace( /[^0-9,]/g, "" )})"

				if (width + 1) <= @width then @getIndexColor (width + 1), height
				else if (height + 1) <= @height then @getIndexColor 0, (height + 1)
				else @generateStyle()
		)

	generateStyle: () ->
		size = @width * @height
		
		style = "	box-shadow:\n";
		
		blur = if @options.blur then "#{@options.blur}px " else "0 "

		for key, row of @colors
			
			for skey, col of row
				style += skey * @options.pixelSize + "px "
				style += key * @options.pixelSize + "px "
				style += blur
				style += @options.pixelSize + "px"
				style += " #{col},\n"


		style = style.replace(/,\n$/, ";")
		style += "	height:0;\n"
		style += "	width:0;\n"

		@callback.call(this, style)


converter = new ImageToCSS 'path'
converter.convert ( style ) ->
	fs = require 'fs'
	html = '<!-- GENERATED BY IMAGE2CSS - created by Felipe K. De Boni -->\n<style> #image { ' + style + ' } </style><div id="image"></div>';

	fs.writeFileSync "style.html", html